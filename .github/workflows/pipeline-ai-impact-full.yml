name: AI Impact Full Pipeline

on:
  workflow_dispatch:
  # pull_request:
  #   types: [opened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  generate_tests:
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        run: |
          $headers = @{
            "Content-Type" = "application/x-www-form-urlencoded"
          }

          $body = @{
            client_id = "ai-impact-client"
            username = "administrator"
            password = "Gft@2025"
            scope    = "openid"
            grant_type = "password"
          }

          $response = Invoke-RestMethod -Method Post -Uri "http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token" -Headers $headers -Body $body
          $accessToken = $response.access_token

          if (-not $accessToken -or $accessToken -eq "null") {
            Write-Host "Failed to obtain access token"
            $response | ConvertTo-Json -Depth 10 | Write-Host
            exit 1
          }

          "access_token=$accessToken" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Checkout the branch
        run: |
          $branchName = "${{ github.event.pull_request.head.ref }}"
          git fetch origin $branchName
          git checkout $branchName

      - name: Create Classes List
        id: changes
        run: |
          $javaFiles = Get-ChildItem -Path "src/main/java/com/scalesec/vulnado" -Recurse -Filter "*.java" | ForEach-Object { $_.FullName }
          $javaFilesString = $javaFiles -join "`n"
          Write-Host "Java files found:`n$javaFilesString"

          "java_files=$javaFilesString" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Prepare and Send to API (TestCreator)
        id: send_api
        run: |
          $javaFilesRaw = (Get-Content -Path $env:GITHUB_ENV | Where-Object { $_ -like "java_files=*" }) -replace "java_files=", ""
          $javaFiles = $javaFilesRaw -split "`n"

          $filesForm = @{}
          $i = 0

          foreach ($file in $javaFiles) {
            $className = [System.IO.Path]::GetFileNameWithoutExtension($file)
            $filesForm["files[$i]"] = Get-Item $file
            $testPath = "src/test/java/com/scalesec/vulnado/${className}Tests.java"
            if (Test-Path $testPath) {
              $filesForm["ExistingTests[$i]"] = Get-Item $testPath
            }
            $i++
          }

          $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/test" -Method Post -Headers @{
            Authorization = "Bearer $env:access_token"
          } -FormData $filesForm -Body @{
            RunName = "GenerateTests"
            jobName = "DemoTestCreator"
            SearchPattern = "*.java"
            TargetExtension = "java"
            PromptId = "TestCreator__CreateUnitTests_V1"
            SourceCodeLanguage = "Java"
            TestType = "Unit"
            TestingFrameworks = "MSTEST,MOQ"
            Llm = "${{ vars.LLM }}"
            AdditionalInstructions = "Generate only the source code, without any extra information"
          }

          $jobId = $response.jobId
          if (-not $jobId) {
            Write-Host "ERROR: Job ID was not returned"
            exit 1
          }

          "job_id=$jobId" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Debug Job ID
        run: |
          Write-Host "Checking job ID:"
          Write-Host "Job ID from env: $env:job_id"
          if (-not $env:job_id) {
            Write-Host "ERROR: job_id is empty!"
            exit 1
          }

      - name: Monitor Job Status
        id: monitor_status
        run: |
          $jobId = $env:job_id
          $status = "Pending"

          while ($status -ne "Completed") {
            $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/jobs/$jobId/status" -Headers @{ Authorization = "Bearer $env:access_token" }
            $status = $response.status
            Write-Host "Current status: $status"
            Start-Sleep -Seconds 10
          }

          Write-Host "Final status: $status"

          if ($response.outputUris) {
            $outputUris = $response.outputUris -join "`n"
            "output_uris=$outputUris" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Save Generated Tests
        run: |
          $outputUris = $env:output_uris -split "`n"

          foreach ($uri in $outputUris) {
            $fileUrl = "http://api.gftaiimpact.local$uri"
            $fileContent = Invoke-RestMethod -Uri $fileUrl -Headers @{ Authorization = "Bearer $env:access_token" }

            $className = [System.IO.Path]::GetFileNameWithoutExtension($uri)
            $testFile = "src/test/java/com/scalesec/vulnado/${className}Tests.java"

            $directory = [System.IO.Path]::GetDirectoryName($testFile)
            if (!(Test-Path $directory)) {
              New-Item -ItemType Directory -Path $directory -Force | Out-Null
            }

            $fileContent | Out-File -FilePath $testFile -Encoding utf8
          }

      - name: Commit and Push Generated Files
        run: |
          git config --global user.name 'gft-ai-impact[bot]'
          git config --global user.email 'ai-impact[bot]@gft.com'
          git add .
          git commit -m "Add generated Documentations and Unit Tests"
          git push --set-upstream origin "${{ github.event.pull_request.head.ref }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "AI Impact documentation and Unit Tests"
          title: "Documentation and Unit Tests created by AI Impact"
          body: "Pull request created by AI Impact CodeDocumenter and CodeTester."
          branch: "tester-by-ai"
          delete-branch: true
          add-paths: |
            ./**/*.java
            ./**/*.md
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: "auto-generated, tests"
          draft: false
