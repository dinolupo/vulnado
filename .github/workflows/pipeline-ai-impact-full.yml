name: AI Impact Full Pipeline

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  generate_tests:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with Keycloak
        id: keycloak_auth
        shell: powershell
        run: |
          $headers = @{ "Content-Type" = "application/x-www-form-urlencoded" }
          $body = @{
            client_id = "ai-impact-client"
            username = "administrator"
            password = "Gft@2025"
            scope    = "openid"
            grant_type = "password"
          }
          $response = Invoke-RestMethod -Uri "http://auth.gftaiimpact.local/realms/ai-impact/protocol/openid-connect/token" -Method Post -Headers $headers -Body $body
          if (-not $response.access_token) { Write-Host "‚ùå Failed to obtain token"; exit 1 }
          "access_token=$($response.access_token)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Checkout the branch
        shell: powershell
        run: |
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git checkout "${{ github.event.pull_request.head.ref }}"

      - name: Create Classes List
        id: changes
        shell: powershell
        run: |
          $files = Get-ChildItem -Path "src/main/java/com/scalesec/vulnado" -Recurse -Filter "*.java" | ForEach-Object { $_.FullName }
          if (-not $files) { Write-Host "No Java files found"; exit 1 }
          "java_files<<EOF`n$($files -join "`n")`nEOF" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Prepare and Send to API (TestCreator)
        id: send_api
        shell: powershell
        run: |
          $files = "${{ env.java_files }}" -split "`n"
          $form = @{}
          foreach ($file in $files) {
            if (-not [string]::IsNullOrWhiteSpace($file)) {
              $className = [System.IO.Path]::GetFileNameWithoutExtension($file)
              $testFile = "src/test/java/com/scalesec/vulnado/${className}Tests.java"
              $form.Add("files", Get-Item $file)
              if (Test-Path $testFile) { $form.Add("ExistingTests", Get-Item $testFile) }
            }
          }
          $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/test" -Method Post -Headers @{ Authorization = "Bearer $env:access_token" } -Form $form + @{
            RunName = "GenerateTests"; jobName = "DemoTestCreator"
            SearchPattern = "*.java"; TargetExtension = "java"
            PromptId = "TestCreator__CreateUnitTests_V1"
            SourceCodeLanguage = "Java"; TestType = "Unit"
            TestingFrameworks = "MSTEST,MOQ"
            Llm = "${{ vars.LLM }}"
            AdditionalInstructions = "Generate only the source code, without any extra information"
          }
          "job_id=$($response.jobId)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Monitor Job Status
        id: monitor_status
        shell: powershell
        run: |
          $jobId = $env:job_id
          $status = "Pending"
          do {
            Start-Sleep -Seconds 10
            $response = Invoke-RestMethod -Uri "http://api.gftaiimpact.local/ai/jobs/$jobId/status" -Headers @{ Authorization = "Bearer $env:access_token" }
            $status = $response.status
            Write-Host "Status: $status"
          } while ($status -ne "Completed")
          $uris = $response.results.output.uri -join "`n"
          "output_uris<<EOF`n$uris`nEOF" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Save Generated Tests
        shell: powershell
        run: |
          $uris = "${{ env.output_uris }}" -split "`n"
          foreach ($uri in $uris) {
            $content = Invoke-RestMethod -Uri "http://api.gftaiimpact.local$uri" -Headers @{ Authorization = "Bearer $env:access_token" }
            $name = [System.IO.Path]::GetFileNameWithoutExtension($uri)
            $path = "src/test/java/com/scalesec/vulnado/${name}Tests.java"
            New-Item -ItemType Directory -Path (Split-Path $path) -Force | Out-Null
            $content | Out-File $path -Encoding utf8
          }

      - name: Commit and Push Generated Files
        shell: powershell
        run: |
          git config --global user.name 'gft-ai-impact[bot]'
          git config --global user.email 'ai-impact[bot]@gft.com'
          git add .
          git commit -m "Add generated Documentations and Unit Tests"
          git push --set-upstream origin "${{ github.event.pull_request.head.ref }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "AI Impact documentation and Unit Tests"
          title: "Documentation and Unit Tests created by AI Impact"
          body: "Pull request created by AI Impact CodeDocumenter and CodeTester."
          branch: "tester-by-ai"
          delete-branch: true
          add-paths: |
            ./**/*.java
            ./**/*.md
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: "auto-generated, tests"
          draft: false
